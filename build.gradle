buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:1.2.2.RELEASE")
    }
}



apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'distribution'
apply plugin: 'spring-boot'
apply plugin: 'maven-publish'


// We use Java 7
sourceCompatibility = 1.8
targetCompatibility = 1.8

// deal with the changing dependency of sparqlmap
configurations.all {
    // check for updates every build
    resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
}

configurations{

    compile.exclude module: 'log4j-over-slf4j'
}


// maven publication

publishing {
    publications {
        maven(MavenPublication) {
            groupId 'org.aksw.sparqlmap'
            artifactId 'sparqlmap-client'
            version '0.6.4'

            from components.java 
        }
    }
}

springBoot {
    mainClass = "org.aksw.sparqlmap.web.spring.SparqlmapWebApplication"
}

jar {
    baseName = 'sparqlmap'
    version =  '0.7.0-SNAPSHOT'
}

repositories {
	mavenLocal()
    mavenCentral()
    maven { url "http://maven.aksw.org/archiva/repository/internal" }
    maven { url "http://maven.aksw.org/archiva/repository/snapshots" }
}

dependencies {
    compile("org.springframework.boot:spring-boot-starter-web") {
        exclude module: "spring-boot-starter-tomcat"
    	exclude module: 'spring-boot-starter-logging'
    	exclude module: "logback-classic"

    }
    compile("org.springframework:spring-tx")
    compile("org.springframework.boot:spring-boot-starter-jetty")


    compile("org.springframework.boot:spring-boot-starter-actuator"){
    	exclude module: "logback-classic"
    }

    compile group: "org.aksw.sparqlmap", name: "sparqlmap-core", version: "0.7.0-SNAPSHOT", changing: true
    compile 'commons-cli:commons-cli:1.2'
    compile 'com.beust:jcommander:1.58'
    testCompile("junit:junit")
}



startScripts {
    classpath = files()
    mainClassName = 'sparqlmap'
    applicationName = 'sparqlmap'
      doLast {
        def windowsScriptFile = file getWindowsScript()
        def unixScriptFile  = file getUnixScript()
        windowsScriptFile.text = windowsScriptFile.text.replace('CLASSPATH=', 'CLASSPATH=%APP_HOME%\\lib\\*')
        unixScriptFile.text  = unixScriptFile.text.replace('CLASSPATH=', 'CLASSPATH=$APP_HOME/lib/*')
    }
}

